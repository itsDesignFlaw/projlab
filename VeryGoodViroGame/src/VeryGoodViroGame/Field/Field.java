package VeryGoodViroGame.Field;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : VeryGoodViroGame.Field.Field.java
//  @ Date : 2022. 03. 27.
//  @ Author : 
//
//


import VeryGoodViroGame.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;


/**
 * Az egyszerű mezőt reprezentálja, melyen a virológusok mozoghatnak. Ismernie kell, adott mezőn, mely virológusok
 * állnak.
 */
public class Field implements DrawableComponent
{
    List<Virologist> virologists = new ArrayList<>();
    private List<Field> neighbours = new ArrayList<>();
    
    public Field()
    {
        neighbours = new ArrayList<Field>();
    }
    
    /**
     * A virológus mezőre lépésekor ezt a függvényt kell meghívni a virolgóust paraméterként átadva, ezáltal tudja a
     * mező befogadni.
     *
     * @param v A virológus aki a mezőre lép.
     */
    public void AcceptViro(Virologist v)
    {
        virologists.add(v);
        v.SetField(this);
    }
    
    /**
     * Ha egy virológus rajta van egy mezőn, akkor lehetősége van a mezővel interaktálni.
     *
     * @param v A virológus aki a mezőn van.
     */
    public void Interact(Virologist v)
    {
    }
    
    /**
     * Ez a metódus felelős azért, hogy a virológust le tudjuk venni a mezőről, amikor az el akarja hagyni azt.
     *
     * @param v A virológus aki a mezőt el akarja hagyni.
     */
    public void RemoveViro(Virologist v)
    {
        virologists.remove(v);
    }
    
    /**
     * Ez a metódus felelős azért, hogy a mezőnek felvegyünk egy szomszédot.
     *
     * @param f A leendő szomszédos mező.
     */
    public void AddNeighbour(Field f)
    {
        neighbours.add(f);
    }
    
    XRandom r = new XRandom();
    
    /**
     * Visszaad egyet a környező mezők közül, random.
     */
    public Field GetRandomNeighbour()
    {
        return neighbours.get(r.nextInt(neighbours.size()));
    }
    
    public void Destroy()
    {
    }
    
    public List<Field> GetNeighbours()
    {
        return new ArrayList<>(neighbours);
    }
    
    public List<Virologist> GetVirologists()
    {
        return virologists;
    }
    
    @Override
    public String toString()
    {
        return "\tneighbours: " + neighbours.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", ")) + "\n\tvirologists: " + virologists.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", "));
    }
    @Override
    public String GetDrawString()
    {
        return "field";
    }
}
