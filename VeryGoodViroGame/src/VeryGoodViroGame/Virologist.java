package VeryGoodViroGame;//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : VeryGoodViroGame.Virologist.java
//  @ Date : 2022. 03. 27.
//  @ Author : 
//
//


import VeryGoodViroGame.Agent.Agent;
import VeryGoodViroGame.Agent.GeneticCode;
import VeryGoodViroGame.Equipment.Equipment;
import VeryGoodViroGame.Field.Field;
import VeryGoodViroGame.MoveStrategy.*;

import java.lang.reflect.InvocationTargetException;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Egy játékos által irányított virológust reprezentál a játékban.
 * Ez az osztály felelős a virológus által véghezvihető tevékenységek megvalósításáért,
 * ilyenek például a mozgás, az erőforrások gyűjtése, és az ágensek létrehozása.
 */
public class Virologist
{
    iMoveStrategy moveStrategy = new MSSimple();
    List<InvItem> items = new ArrayList<>();
    List<GeneticCode> learntCodes = new ArrayList<>();
    List<Agent> stash = new ArrayList<>();
    
    //Amin áll
    Field mezo = new Field();
    private Resource resource = new Resource();
    List<Equipment> equipments = new ArrayList<>();
    
    /**
     * Beállítja a virológus erőforrás tagváltozóját.
     *
     * @param r erőforrás
     */
    public void SetResource(Resource r)
    {
        resource = r;
    }
    
    /**
     * Beállítja a mezőt amin a virológus áll.
     *
     * @param f A mező ahol a virológus állni fog.
     */
    public void SetField(Field f)
    {
        mezo = f;
    }
    
    
    /**
     * A metódus visszatér egy igaz vagy hamis értékkel,
     * annak megfeleleőn, hogy az adott időpillanatban meg van e bénítva a virológus.
     *
     * @return Igaz, ha a virológus le van bénulva, másképp hamis.
     */
    public boolean IsParalyzed()
    {
        Logger.NewFunctionCall(this, "IsParalyzed");
        
        for(InvItem item : items)
        {
            if(item.IsParalyzed())
            {
                return true;
            }
        }
        Logger.ReturnFunction();
        return false;
    }
    
    
    /**
     * A virológus tartalékát növeli a kapott anyaggal.
     *
     * @param amount Az anyagmennyiség amit a virológusnak adunk.
     */
    public Resource AddResource(Resource amount)
    {
        //Összeadja az items listán a GetMaxResource értékét, majd hozzáaadja az alap értéket
        int maxResource = 20;
        for(InvItem item : items)
        {
            maxResource += item.GetMaxResource();
        }
        return resource.Add(amount, maxResource);
    }
    
    /**
     * Elvesz a virológustól anyagot.
     *
     * @param amount Az elvett anyag mennyisége.
     * @return resource
     */
    public Resource RemoveResource(Resource amount)
    {
        Resource removed = new Resource();
        if(IsParalyzed())
            removed = resource.Remove(amount);
        return removed;
    }
    
    /**
     * Craftol egy vírust
     *
     * @param code a genetikai kód amivel a vírus előáll
     */
    public void CraftVirus(GeneticCode code)
    {
        Logger.NewFunctionCall(this, "CraftVirus");
        for(InvItem item : items)
        {
            if(!item.CanCraft())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        Resource cost = code.GetCost();
        if(resource.hasEnough(cost))
        {
            resource.Remove(cost);
            Agent created = code.CreateVirus();
            AddAgentToStash(created);
        }
        Logger.ReturnFunction();
    }
    
    /**
     * Egy ágenst hozzáad a virológus tárolójához.
     *
     * @param agent Az ágens amit hozzáadunk a virológus tárolójához.
     */
    public void AddAgentToStash(Agent agent)
    {
        Logger.NewFunctionCall(this, "AddAgentToStash");
        stash.add(agent);
        Logger.ReturnFunction();
        
    }
    
    public void RemoveAgentFromStash(Agent agent)
    {
        stash.remove(agent);
    }
    
    /**
     * Ezzel a függvénnyel  a virológus lecraftolja az adott genetikai kódhoz tartozó vakcinát.
     *
     * @param code Az előállítandó vakcinához tartozó genetikai kód.
     */
    public void CraftVaccine(GeneticCode code)
    {
        Logger.NewFunctionCall(this, "CraftVaccine");
        for(InvItem item : items)
        {
            if(!item.CanCraft())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        Resource cost = code.GetCost();
        if(resource.hasEnough(cost))
        {
            resource.Remove(cost);
            Agent created = code.CreateVaccine();
            AddAgentToStash(created);
        }
        Logger.ReturnFunction();
    }
    
    //Mindegyiknél feltételezzük, hogy meg tudja érinteni, előtte ellenőrizzük
    //When somebody uses an agent on you
    
    /**
     * Az ágenst virológushoz adó metódus.
     *
     * @param agent  a felkenődő ágens
     * @param source a virológus aki az ágenst felkente
     * @return boolean visszatérési érték, sikeres volt-e a kenés
     */
    public boolean ApplyAgent(Agent agent, Virologist source)
    {
        Logger.NewFunctionCall(this, "ApplyAgent");
        for(InvItem item : items)
        {
            if(!item.CanAgentBeApplied(agent, source))
            {
                Logger.ReturnFunction();
                return false;
            }
        }
        AddItem(agent);
        
        Logger.ReturnFunction();
        return true;
    }
    
    //When you want to apply an agent on somebody
    
    /**
     * Ágens másik virológusra való felkenését megvalósító metódus.
     *
     * @param agent  a felkenni kívánt metódus
     * @param target virológus akire az ágens felkenjük
     */
    public void UseAgent(Agent agent, Virologist target)
    {
        Logger.NewFunctionCall(this, "UseAgent");
        for(InvItem item : items)
        {
            if(!item.CanApplyAgent())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        agent.Apply(this, target);
        Logger.ReturnFunction();
    }
    
    //Felszedi a mezőn lévő cuccokat, azaz meghívja az Interact fv-ét
    
    /**
     * A virológus kapcsolatba lép az adott mezővel, amin tartózkodik.
     */
    public void InteractWithField()
    {
        Logger.NewFunctionCall(this, "InteractWithField");
        for(InvItem item : items)
        {
            if(!item.CanInteract())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        mezo.Interact(this);
        Logger.ReturnFunction();
    }
    
    
    /**
     * A paraméterként kapott célponttól ellopja a szintén paraméterben jelölt felszerelést,
     * amennyiben a célpont lebénult állapotban van.
     *
     * @param target    A célpont akitől el akarja lopni.
     * @param equipment A felszerelés amit el akar lopni.
     */
    public void StealEquipmentFromViro(Virologist target, Equipment equipment)
    {
        Logger.NewFunctionCall(this, "StealEquipmentFromViro");
        for(InvItem item : items)
        {
            if(!item.CanSteal())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        if(target.RemoveEquipment(equipment))
        {
            AddEquipment(equipment);
        }
        Logger.ReturnFunction();
    }
    
    public void StealResourceFromViro(Virologist target)
    {
        StealResourceFromViro(target, target.resource);
    }
    
    /**
     * A paraméterként kapott célponttól ellopja
     * a szintén paraméterben jelölt mennyiségű anyagot, amennyiben a célpont lebénult állapotban van.
     *
     * @param target a virolügus akitől lop
     * @param amount a mennyiség amit ellop
     */
    public void StealResourceFromViro(Virologist target, Resource amount)
    {
        Logger.NewFunctionCall(this, "StealResourceFromViro");
        for(InvItem item : items)
        {
            if(!item.CanSteal())
            {
                Logger.ReturnFunction();
                return;
            }
        }
        Resource removed = target.RemoveResource(amount);
        AddResource(removed);
        Logger.ReturnFunction();
    }
    
    /**
     * Eltávolítja a virológustól az equipment-et
     *
     * @param equipment amit eltávolit
     * @return visszaadja, hogy el tudta-e távolitani
     */
    public boolean RemoveEquipment(Equipment equipment)
    {
        Logger.NewFunctionCall(this, "RemoveEquipment");
        IsParalyzed();
        DestroyEquipment(equipment);
        Logger.ReturnFunction();
        return true;
    }
    
    public void DestroyEquipment(Equipment equipment)
    {
        Logger.NewFunctionCall(this, "DestroyEquipment");
        equipments.remove(equipment);
        items.remove(equipment);
        Logger.ReturnFunction();
    }
    
    /**
     * Hozzáadjuk a virológushoz az equipmentet.
     *
     * @param equipment a felszerelés amit a virológushoz adunk
     */
    public boolean AddEquipment(Equipment equipment)
    {
        Logger.NewFunctionCall(this, "AddEquipment");
        if(equipments.size() >= 3)
            return false;
        this.equipments.add(equipment);
        AddItem(equipment);
        Logger.ReturnFunction();
        return true;
    }
    
    /**
     * A metódus eltávolítja a paraméterül kapott hatást a virológusról.
     *
     * @param item A hatás amit eltávolít.
     */
    public void RemoveItem(InvItem item)
    {
        Logger.NewFunctionCall(this, "RemoveItem");
        items.remove(item);
        Logger.ReturnFunction();
    }
    
    /**
     * A metódus kifejti a paraméterül kapott hatást a virológusra, és hozzéadja az itemekhez
     *
     * @param item -ezt adja hozzá
     */
    public void AddItem(InvItem item)
    {
        Logger.NewFunctionCall(this, "AddItem");
        items.add(item);
        Logger.ReturnFunction();
    }
    
    /**
     * A virológus megtanulja az adott genetikai kódot.
     *
     * @param code ezt tanulja meg éppen
     */
    public void LearnGeneticCode(GeneticCode code)
    {
        Logger.NewFunctionCall(this, "LearnGeneticCode");
        if(learntCodes.stream().anyMatch(x -> x.CompareCodes(code)))
        {
            learntCodes.add(code);
            if(learntCodes.size() == GameManager.CodeCount)
                GameManager.EndGame(this);
        }
        
        Logger.ReturnFunction();
    }
    
    /**
     * Visszaadja a mezőt amin a virológus tartózkodik.
     *
     * @return A mező amin a virológus tartózkodik.
     */
    public Field GetField()
    {
        Logger.NewFunctionCall(this, "GetField");
        Logger.ReturnFunction();
        return mezo;
    }
    
    static HashMap<Class, Integer> strategyPriority = new HashMap<>();
    
    static
    {
        strategyPriority.put(MSSimple.class, 0);
        strategyPriority.put(MSVitusDance.class, 1);
        strategyPriority.put(MSParalyzed.class, 2);
        strategyPriority.put(MSBear.class, 3);
    }
    
    HashMap<Class, Integer> strategyFifo = new HashMap<>();
    
    /**
     * Megváltoztatja a virológus aktuális mozgási stratégiáját.
     *
     * @param strategy erre változtatja meg
     */
    public void ChangeMoveStrategy(iMoveStrategy strategy)
    {
        if(strategyPriority.get(moveStrategy.getClass()) < strategyPriority.get(strategy.getClass()))
            moveStrategy = strategy;
        if(strategyFifo.containsKey(strategy.getClass()))
            strategyFifo.put(strategy.getClass(), strategyFifo.get(strategy.getClass()) + 1);
        else
            strategyFifo.put(strategy.getClass(), 1);
    }
    
    /**
     * Eltávolítja az átadott mozgási stratégiát, és visszarakja az éppen érvényeset.
     *
     * @param strategy ezt távolitja el
     */
    //Hiper szuper magic függvény, mindent is tud
    public void RemoveMoveStrategy(iMoveStrategy strategy)
    {
        if(!strategyFifo.containsKey(strategy.getClass()))
            return;
        strategyFifo.put(strategy.getClass(), strategyFifo.get(strategy.getClass()) - 1);
        if(strategyFifo.get(strategy.getClass()) <= 0)
        {
            try
            {
                moveStrategy =
                        (iMoveStrategy) strategyFifo.entrySet().stream().filter(x -> x.getValue() > 0).sorted((x, y) -> strategyPriority.get(x.getKey()).compareTo(strategyPriority.get(y.getKey()))).map(Map.Entry::getKey).findFirst().orElse(MSSimple.class).getConstructor().newInstance();
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
        }
    }
    
    /**
     * Másik mezőre lépést megvalósító metódus
     *
     * @param to a mező amire lépni szeretnénk
     */
    public void MoveTo(Field to)
    {
        Logger.NewFunctionCall(this, "MoveTo");
        moveStrategy.ExecuteMove(this, mezo, to);
        Logger.ReturnFunction();
    }
    
    /**
     * Nem írja a szöveg, hogy csak a medvével fertőzött Virológust lehet megölni,
     * szóval mindenkit meg lehet
     */
    public void KillVirologist()
    {
        Logger.NewFunctionCall(this, "KillVirologist");
        //dead
        Logger.ReturnFunction();
    }
    
    public void UseEquipment(Equipment e, Virologist target)
    {
        e.Use(target);
    }
    
    @Override
    public String toString()
    {
        return "\tmoveStrategy: " + moveStrategy.getClass().getSimpleName() + "\n\titems: " + items.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", ")) + "\n\tlearntCodes: " + learntCodes.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", ")) + "\n\tstash: " + stash.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", ")) + "\n\tmezo: " + EntityManager.GetObjectName(mezo) + "\n\tresource: " + resource.toString() + "\n\tequipments: " + equipments.stream().map(EntityManager::GetObjectName).collect(Collectors.joining(", "));
    }
}

